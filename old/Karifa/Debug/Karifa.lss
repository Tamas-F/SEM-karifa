
Karifa.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000002c6  0000035a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  00800062  00800062  0000035c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000038c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000691  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003b7  00000000  00000000  00000a81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d2  00000000  00000000  00000e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  0000120c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000353  00000000  00000000  00001288  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000114  00000000  00000000  000015db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000016ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	16 c0       	rjmp	.+44     	; 0x2e <__ctors_end>
   2:	2e c0       	rjmp	.+92     	; 0x60 <__bad_interrupt>
   4:	2d c0       	rjmp	.+90     	; 0x60 <__bad_interrupt>
   6:	74 c0       	rjmp	.+232    	; 0xf0 <__vector_3>
   8:	2b c0       	rjmp	.+86     	; 0x60 <__bad_interrupt>
   a:	2a c0       	rjmp	.+84     	; 0x60 <__bad_interrupt>
   c:	29 c0       	rjmp	.+82     	; 0x60 <__bad_interrupt>
   e:	28 c0       	rjmp	.+80     	; 0x60 <__bad_interrupt>
  10:	27 c0       	rjmp	.+78     	; 0x60 <__bad_interrupt>
  12:	26 c0       	rjmp	.+76     	; 0x60 <__bad_interrupt>
  14:	b7 c0       	rjmp	.+366    	; 0x184 <__vector_3+0x94>
  16:	bb c0       	rjmp	.+374    	; 0x18e <__vector_3+0x9e>
  18:	bf c0       	rjmp	.+382    	; 0x198 <__vector_3+0xa8>
  1a:	c3 c0       	rjmp	.+390    	; 0x1a2 <__vector_3+0xb2>
  1c:	c7 c0       	rjmp	.+398    	; 0x1ac <__vector_3+0xbc>
  1e:	cb c0       	rjmp	.+406    	; 0x1b6 <__vector_3+0xc6>
  20:	cf c0       	rjmp	.+414    	; 0x1c0 <__vector_3+0xd0>
  22:	d3 c0       	rjmp	.+422    	; 0x1ca <__vector_3+0xda>
  24:	d7 c0       	rjmp	.+430    	; 0x1d4 <__vector_3+0xe4>
  26:	db c0       	rjmp	.+438    	; 0x1de <__vector_3+0xee>
  28:	df c0       	rjmp	.+446    	; 0x1e8 <__vector_3+0xf8>
  2a:	e3 c0       	rjmp	.+454    	; 0x1f2 <__vector_3+0x102>
  2c:	e7 c0       	rjmp	.+462    	; 0x1fc <__vector_3+0x10c>

0000002e <__ctors_end>:
  2e:	11 24       	eor	r1, r1
  30:	1f be       	out	0x3f, r1	; 63
  32:	cf e9       	ldi	r28, 0x9F	; 159
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_copy_data>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	e6 ec       	ldi	r30, 0xC6	; 198
  3e:	f2 e0       	ldi	r31, 0x02	; 2
  40:	02 c0       	rjmp	.+4      	; 0x46 <__SREG__+0x7>
  42:	05 90       	lpm	r0, Z+
  44:	0d 92       	st	X+, r0
  46:	a2 36       	cpi	r26, 0x62	; 98
  48:	b1 07       	cpc	r27, r17
  4a:	d9 f7       	brne	.-10     	; 0x42 <__SREG__+0x3>

0000004c <__do_clear_bss>:
  4c:	20 e0       	ldi	r18, 0x00	; 0
  4e:	a2 e6       	ldi	r26, 0x62	; 98
  50:	b0 e0       	ldi	r27, 0x00	; 0
  52:	01 c0       	rjmp	.+2      	; 0x56 <.do_clear_bss_start>

00000054 <.do_clear_bss_loop>:
  54:	1d 92       	st	X+, r1

00000056 <.do_clear_bss_start>:
  56:	a5 38       	cpi	r26, 0x85	; 133
  58:	b2 07       	cpc	r27, r18
  5a:	e1 f7       	brne	.-8      	; 0x54 <.do_clear_bss_loop>
  5c:	02 d0       	rcall	.+4      	; 0x62 <main>
  5e:	31 c1       	rjmp	.+610    	; 0x2c2 <_exit>

00000060 <__bad_interrupt>:
  60:	cf cf       	rjmp	.-98     	; 0x0 <__vectors>

00000062 <main>:
byte calc_state = 0; //itt tároljuk, hogy hol tartunk az animációban
byte calc_offset = 0; //a cycles pufferhez egy offszet (hogy hova kell írni a számolás eredményét)

int main(void)
{
	MCUCR |= 0x40; // pullup disable (PUD) -> if pin is configured input, the pin goes High-Z
  62:	85 b7       	in	r24, 0x35	; 53
  64:	80 64       	ori	r24, 0x40	; 64
  66:	85 bf       	out	0x35, r24	; 53
#define LED12_PINL	4


static inline void LED_OFF()
{
	DDRB = 0;
  68:	17 ba       	out	0x17, r1	; 23
	PORTB = 0;
  6a:	18 ba       	out	0x18, r1	; 24
	LED_OFF();
	TCCR0A = 0; //normalest normal mode
  6c:	1f bc       	out	0x2f, r1	; 47
	TCCR0B = 0x04; //256 prescaler
  6e:	84 e0       	ldi	r24, 0x04	; 4
  70:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 250; //Ezt csak random beállítjuk, hogy (majdnem) azonnal lejárjon
  72:	8a ef       	ldi	r24, 0xFA	; 250
  74:	82 bf       	out	0x32, r24	; 50
	TIMSK0 = 0x02; //TOIE0: Timer/Counter0 Overflow Interrupt Enable
  76:	82 e0       	ldi	r24, 0x02	; 2
  78:	89 bf       	out	0x39, r24	; 57

	sei();
  7a:	78 94       	sei
			{
				//csak egymás után felvillantjuk a ledeket
				cycles[calc_offset + i] = 0;
				if (i == calc_state)
				{
					cycles[calc_offset + i] = 15;
  7c:	2f e0       	ldi	r18, 0x0F	; 15
				}
			}
			wait[cycle_idx] = 10;	//1 sec = 180
  7e:	3a e0       	ldi	r19, 0x0A	; 10
			{
				calc_offset = 0;
			}
			else if (calc_event_tmp == 2) //felsõ rész szabad
			{
				calc_offset = 0 + CYCLE_NUM/2 * LEDS_NUM;
  80:	4d e0       	ldi	r20, 0x0D	; 13

	//Ezt a részt sokszor megszakíthatja (és meg is fogja) az interrupt -> Igyekezzünk.
    while (1)
    {
		byte calc_event_tmp = 0;
		cli();		//Itt most nem tesz jót ha bejönne egy IT (elronthatja calc_event-et útközben)
  82:	f8 94       	cli
		calc_event_tmp = calc_event;
  84:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <calc_event>
		calc_event = 0;
  88:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <calc_event>
		sei();
  8c:	78 94       	sei
		if (calc_event_tmp > 0)
  8e:	88 23       	and	r24, r24
  90:	01 f1       	breq	.+64     	; 0xd2 <__stack+0x33>
		{
			if (calc_event_tmp == 1) //alsó rész szabad
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	19 f4       	brne	.+6      	; 0x9c <main+0x3a>
			{
				calc_offset = 0;
  96:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
  9a:	21 c0       	rjmp	.+66     	; 0xde <__stack+0x3f>
			}
			else if (calc_event_tmp == 2) //felsõ rész szabad
  9c:	82 30       	cpi	r24, 0x02	; 2
  9e:	f9 f4       	brne	.+62     	; 0xde <__stack+0x3f>
			{
				calc_offset = 0 + CYCLE_NUM/2 * LEDS_NUM;
  a0:	40 93 62 00 	sts	0x0062, r20	; 0x800062 <__data_end>
  a4:	1c c0       	rjmp	.+56     	; 0xde <__stack+0x3f>
			}
			//BEGIN Animáció számolása (calc_state függvényében)
			for (byte i = 0; i < LEDS_NUM; i++)
			{
				//csak egymás után felvillantjuk a ledeket
				cycles[calc_offset + i] = 0;
  a6:	10 82       	st	Z, r1
				if (i == calc_state)
  a8:	98 13       	cpse	r25, r24
  aa:	01 c0       	rjmp	.+2      	; 0xae <__stack+0xf>
				{
					cycles[calc_offset + i] = 15;
  ac:	20 83       	st	Z, r18
			else if (calc_event_tmp == 2) //felsõ rész szabad
			{
				calc_offset = 0 + CYCLE_NUM/2 * LEDS_NUM;
			}
			//BEGIN Animáció számolása (calc_state függvényében)
			for (byte i = 0; i < LEDS_NUM; i++)
  ae:	8f 5f       	subi	r24, 0xFF	; 255
  b0:	31 96       	adiw	r30, 0x01	; 1
  b2:	8d 30       	cpi	r24, 0x0D	; 13
  b4:	c1 f7       	brne	.-16     	; 0xa6 <__stack+0x7>
				if (i == calc_state)
				{
					cycles[calc_offset + i] = 15;
				}
			}
			wait[cycle_idx] = 10;	//1 sec = 180
  b6:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <cycle_idx>
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	e0 5a       	subi	r30, 0xA0	; 160
  be:	ff 4f       	sbci	r31, 0xFF	; 255
  c0:	30 83       	st	Z, r19

			calc_state++;
  c2:	9f 5f       	subi	r25, 0xFF	; 255
			if (calc_state >= 13) calc_state = 0;  //Itt annyit kell írni a feltételbe, ahány állapota van az animációnak
  c4:	9d 30       	cpi	r25, 0x0D	; 13
  c6:	18 f4       	brcc	.+6      	; 0xce <__stack+0x2f>
					cycles[calc_offset + i] = 15;
				}
			}
			wait[cycle_idx] = 10;	//1 sec = 180

			calc_state++;
  c8:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <calc_state>
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <__stack+0x33>
			if (calc_state >= 13) calc_state = 0;  //Itt annyit kell írni a feltételbe, ahány állapota van az animációnak
  ce:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <calc_state>
	...
}

// NOP: No Operation.
static inline void _nop()
{
	asm volatile ("nop");
  da:	00 00       	nop
  dc:	d2 cf       	rjmp	.-92     	; 0x82 <main+0x20>
			//BEGIN Animáció számolása (calc_state függvényében)
			for (byte i = 0; i < LEDS_NUM; i++)
			{
				//csak egymás után felvillantjuk a ledeket
				cycles[calc_offset + i] = 0;
				if (i == calc_state)
  de:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <calc_state>
  e2:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <__data_end>
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	e5 59       	subi	r30, 0x95	; 149
  ea:	ff 4f       	sbci	r31, 0xFF	; 255
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	db cf       	rjmp	.-74     	; 0xa6 <__stack+0x7>

000000f0 <__vector_3>:
		_nop();
    }
}

ISR(TIM0_OVF_vect)
{
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	2f 93       	push	r18
  fc:	3f 93       	push	r19
  fe:	4f 93       	push	r20
 100:	5f 93       	push	r21
 102:	6f 93       	push	r22
 104:	7f 93       	push	r23
 106:	8f 93       	push	r24
 108:	9f 93       	push	r25
 10a:	af 93       	push	r26
 10c:	bf 93       	push	r27
 10e:	ef 93       	push	r30
 110:	ff 93       	push	r31
	if ((on_off & 1) == 0)
 112:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <on_off>
 116:	80 fd       	sbrc	r24, 0
 118:	09 c0       	rjmp	.+18     	; 0x12c <__vector_3+0x3c>
	{
		//OFF
		TCNT0 = off_time;
 11a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <off_time>
 11e:	82 bf       	out	0x32, r24	; 50
#define LED12_PINL	4


static inline void LED_OFF()
{
	DDRB = 0;
 120:	17 ba       	out	0x17, r1	; 23
	PORTB = 0;
 122:	18 ba       	out	0x18, r1	; 24
		LED_OFF();
		on_off = 1;		//Kövi állapot ON
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <on_off>
 12a:	ba c0       	rjmp	.+372    	; 0x2a0 <__vector_3+0x1b0>
	}
	else
	{
		//ON
		if (cycles[buffer_offset + led_idx] == 0) //Ha a fenyero min, nem kell semmit bekapcsolni, azonnal off állapotba megyünk
 12c:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <buffer_offset>
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <led_idx>
 136:	e5 59       	subi	r30, 0x95	; 149
 138:	ff 4f       	sbci	r31, 0xFF	; 255
 13a:	e8 0f       	add	r30, r24
 13c:	f1 1d       	adc	r31, r1
 13e:	80 81       	ld	r24, Z
 140:	81 11       	cpse	r24, r1
 142:	05 c0       	rjmp	.+10     	; 0x14e <__vector_3+0x5e>
		{
			//TIFR0 |= 0x02; //Set TOV0
			TCNT0 = 256 - 16;
 144:	80 ef       	ldi	r24, 0xF0	; 240
 146:	82 bf       	out	0x32, r24	; 50
#define LED12_PINL	4


static inline void LED_OFF()
{
	DDRB = 0;
 148:	17 ba       	out	0x17, r1	; 23
	PORTB = 0;
 14a:	18 ba       	out	0x18, r1	; 24
 14c:	64 c0       	rjmp	.+200    	; 0x216 <__vector_3+0x126>
			LED_OFF();
		}
		else
		{
			TCNT0 = 256 - cycles[buffer_offset + led_idx];			//ennyi ideig kell bekapcsolni a ledet
 14e:	81 95       	neg	r24
 150:	82 bf       	out	0x32, r24	; 50
			off_time = 256 - (16 - cycles[buffer_offset + led_idx]); //kikapcs idõt is kiszámoljuk
 152:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <buffer_offset>
 156:	29 2f       	mov	r18, r25
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <led_idx>
 15e:	d9 01       	movw	r26, r18
 160:	a5 59       	subi	r26, 0x95	; 149
 162:	bf 4f       	sbci	r27, 0xFF	; 255
 164:	ae 0f       	add	r26, r30
 166:	b1 1d       	adc	r27, r1
 168:	8c 91       	ld	r24, X
 16a:	80 51       	subi	r24, 0x10	; 16
 16c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <off_time>
			switch (led_idx)
 170:	4e 2f       	mov	r20, r30
 172:	50 e0       	ldi	r21, 0x00	; 0
 174:	4d 30       	cpi	r20, 0x0D	; 13
 176:	51 05       	cpc	r21, r1
 178:	08 f0       	brcs	.+2      	; 0x17c <__vector_3+0x8c>
 17a:	45 c0       	rjmp	.+138    	; 0x206 <__vector_3+0x116>
 17c:	fa 01       	movw	r30, r20
 17e:	e6 5f       	subi	r30, 0xF6	; 246
 180:	ff 4f       	sbci	r31, 0xFF	; 255
 182:	09 94       	ijmp
}

static inline void LED0_ON()
{
	DDRB = bv(LED0_PINH) | bv(LED0_PINL);
 184:	89 e0       	ldi	r24, 0x09	; 9
 186:	87 bb       	out	0x17, r24	; 23
	PORTB = bv(LED0_PINH);
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	88 bb       	out	0x18, r24	; 24
 18c:	44 c0       	rjmp	.+136    	; 0x216 <__vector_3+0x126>
}

static inline void LED1_ON()
{
	DDRB = bv(LED1_PINH) | bv(LED1_PINL);
 18e:	8a e0       	ldi	r24, 0x0A	; 10
 190:	87 bb       	out	0x17, r24	; 23
	PORTB = bv(LED1_PINH);
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	88 bb       	out	0x18, r24	; 24
 196:	3f c0       	rjmp	.+126    	; 0x216 <__vector_3+0x126>
}

static inline void LED2_ON()
{
	DDRB = bv(LED2_PINH) | bv(LED2_PINL);
 198:	8c e0       	ldi	r24, 0x0C	; 12
 19a:	87 bb       	out	0x17, r24	; 23
	PORTB = bv(LED2_PINH);
 19c:	84 e0       	ldi	r24, 0x04	; 4
 19e:	88 bb       	out	0x18, r24	; 24
 1a0:	3a c0       	rjmp	.+116    	; 0x216 <__vector_3+0x126>
}

static inline void LED3_ON()
{
	DDRB = bv(LED3_PINH) | bv(LED3_PINL);
 1a2:	89 e0       	ldi	r24, 0x09	; 9
 1a4:	87 bb       	out	0x17, r24	; 23
	PORTB = bv(LED3_PINH);
 1a6:	88 e0       	ldi	r24, 0x08	; 8
 1a8:	88 bb       	out	0x18, r24	; 24
 1aa:	35 c0       	rjmp	.+106    	; 0x216 <__vector_3+0x126>
}

static inline void LED4_ON()
{
	DDRB = bv(LED4_PINH) | bv(LED4_PINL);
 1ac:	8a e0       	ldi	r24, 0x0A	; 10
 1ae:	87 bb       	out	0x17, r24	; 23
	PORTB = bv(LED4_PINH);
 1b0:	88 e0       	ldi	r24, 0x08	; 8
 1b2:	88 bb       	out	0x18, r24	; 24
 1b4:	30 c0       	rjmp	.+96     	; 0x216 <__vector_3+0x126>
}

static inline void LED5_ON()
{
	DDRB = bv(LED5_PINH) | bv(LED5_PINL);
 1b6:	8c e0       	ldi	r24, 0x0C	; 12
 1b8:	87 bb       	out	0x17, r24	; 23
	PORTB = bv(LED5_PINH);
 1ba:	88 e0       	ldi	r24, 0x08	; 8
 1bc:	88 bb       	out	0x18, r24	; 24
 1be:	2b c0       	rjmp	.+86     	; 0x216 <__vector_3+0x126>
}

static inline void LED6_ON()
{
	DDRB = bv(LED6_PINH) | bv(LED6_PINL);
 1c0:	81 e1       	ldi	r24, 0x11	; 17
 1c2:	87 bb       	out	0x17, r24	; 23
	PORTB = bv(LED6_PINH);
 1c4:	80 e1       	ldi	r24, 0x10	; 16
 1c6:	88 bb       	out	0x18, r24	; 24
 1c8:	26 c0       	rjmp	.+76     	; 0x216 <__vector_3+0x126>
}

static inline void LED7_ON()
{
	DDRB = bv(LED7_PINH) | bv(LED7_PINL);
 1ca:	82 e1       	ldi	r24, 0x12	; 18
 1cc:	87 bb       	out	0x17, r24	; 23
	PORTB = bv(LED7_PINH);
 1ce:	80 e1       	ldi	r24, 0x10	; 16
 1d0:	88 bb       	out	0x18, r24	; 24
 1d2:	21 c0       	rjmp	.+66     	; 0x216 <__vector_3+0x126>
}

static inline void LED8_ON()
{
	DDRB = bv(LED8_PINH) | bv(LED8_PINL);
 1d4:	84 e1       	ldi	r24, 0x14	; 20
 1d6:	87 bb       	out	0x17, r24	; 23
	PORTB = bv(LED8_PINH);
 1d8:	80 e1       	ldi	r24, 0x10	; 16
 1da:	88 bb       	out	0x18, r24	; 24
 1dc:	1c c0       	rjmp	.+56     	; 0x216 <__vector_3+0x126>
}

static inline void LED9_ON()
{
	DDRB = bv(LED9_PINH) | bv(LED9_PINL);
 1de:	88 e1       	ldi	r24, 0x18	; 24
 1e0:	87 bb       	out	0x17, r24	; 23
	PORTB = bv(LED9_PINH);
 1e2:	88 e0       	ldi	r24, 0x08	; 8
 1e4:	88 bb       	out	0x18, r24	; 24
 1e6:	17 c0       	rjmp	.+46     	; 0x216 <__vector_3+0x126>
}

static inline void LED10_ON()
{
	DDRB = bv(LED10_PINH) | bv(LED10_PINL);
 1e8:	81 e1       	ldi	r24, 0x11	; 17
 1ea:	87 bb       	out	0x17, r24	; 23
	PORTB = bv(LED10_PINH);
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	88 bb       	out	0x18, r24	; 24
 1f0:	12 c0       	rjmp	.+36     	; 0x216 <__vector_3+0x126>
}

static inline void LED11_ON()
{
	DDRB = bv(LED11_PINH) | bv(LED11_PINL);
 1f2:	82 e1       	ldi	r24, 0x12	; 18
 1f4:	87 bb       	out	0x17, r24	; 23
	PORTB = bv(LED11_PINH);
 1f6:	82 e0       	ldi	r24, 0x02	; 2
 1f8:	88 bb       	out	0x18, r24	; 24
 1fa:	0d c0       	rjmp	.+26     	; 0x216 <__vector_3+0x126>
}

static inline void LED12_ON()
{
	DDRB = bv(LED12_PINH) | bv(LED12_PINL);
 1fc:	84 e1       	ldi	r24, 0x14	; 20
 1fe:	87 bb       	out	0x17, r24	; 23
	PORTB = bv(LED12_PINH);
 200:	84 e0       	ldi	r24, 0x04	; 4
 202:	88 bb       	out	0x18, r24	; 24
 204:	08 c0       	rjmp	.+16     	; 0x216 <__vector_3+0x126>
				default: led_idx = 0; break; //error
			}
		}

		//Ha a fenyero max vagy min, nem kell majd off-ba menni
		if (cycles[buffer_offset + led_idx] < 15 && cycles[buffer_offset + led_idx] > 0)
 206:	f9 01       	movw	r30, r18
 208:	e5 59       	subi	r30, 0x95	; 149
 20a:	ff 4f       	sbci	r31, 0xFF	; 255
 20c:	80 81       	ld	r24, Z
 20e:	81 50       	subi	r24, 0x01	; 1
 210:	8e 30       	cpi	r24, 0x0E	; 14
 212:	80 f0       	brcs	.+32     	; 0x234 <__vector_3+0x144>
 214:	42 c0       	rjmp	.+132    	; 0x29a <__vector_3+0x1aa>
 216:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <buffer_offset>
 21a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <led_idx>
 21e:	e9 2f       	mov	r30, r25
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	e5 59       	subi	r30, 0x95	; 149
 224:	ff 4f       	sbci	r31, 0xFF	; 255
 226:	e8 0f       	add	r30, r24
 228:	f1 1d       	adc	r31, r1
 22a:	20 81       	ld	r18, Z
 22c:	21 50       	subi	r18, 0x01	; 1
 22e:	2e 30       	cpi	r18, 0x0E	; 14
 230:	20 f4       	brcc	.+8      	; 0x23a <__vector_3+0x14a>
 232:	01 c0       	rjmp	.+2      	; 0x236 <__vector_3+0x146>
 234:	80 e0       	ldi	r24, 0x00	; 0
		{
			on_off = 0;
 236:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <on_off>
		}

		led_idx++;
 23a:	8f 5f       	subi	r24, 0xFF	; 255
		if (led_idx > LEDS_NUM-1)
 23c:	8d 30       	cpi	r24, 0x0D	; 13
 23e:	18 f4       	brcc	.+6      	; 0x246 <__vector_3+0x156>
		if (cycles[buffer_offset + led_idx] < 15 && cycles[buffer_offset + led_idx] > 0)
		{
			on_off = 0;
		}

		led_idx++;
 240:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <led_idx>
 244:	2d c0       	rjmp	.+90     	; 0x2a0 <__vector_3+0x1b0>
		if (led_idx > LEDS_NUM-1)
		{
			//végigmentünk a ledeken
			led_idx = 0;
 246:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <led_idx>
			if (wait_cnt > 0) wait_cnt--;	//csökkentjük a várakozási idõt
 24a:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <wait_cnt>
 24e:	88 23       	and	r24, r24
 250:	29 f0       	breq	.+10     	; 0x25c <__vector_3+0x16c>
 252:	81 50       	subi	r24, 0x01	; 1
 254:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <wait_cnt>
			if (wait_cnt == 0)
 258:	81 11       	cpse	r24, r1
 25a:	22 c0       	rjmp	.+68     	; 0x2a0 <__vector_3+0x1b0>
			{
				//vége a várakozásnak, mehet a következõ kép
				cycle_idx++;
 25c:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <cycle_idx>
 260:	ef 5f       	subi	r30, 0xFF	; 255
 262:	e0 93 6a 00 	sts	0x006A, r30	; 0x80006a <cycle_idx>
				buffer_offset += 13;
 266:	93 5f       	subi	r25, 0xF3	; 243
 268:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <buffer_offset>
				if (cycle_idx >= CYCLE_NUM)
 26c:	e2 30       	cpi	r30, 0x02	; 2
 26e:	48 f0       	brcs	.+18     	; 0x282 <__vector_3+0x192>
				{
					//a teljes animáció lement, kezdjük elõrõl
					cycle_idx = 0;
 270:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <cycle_idx>
					buffer_offset = 0;
 274:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <buffer_offset>
					//és jelezzük, hogy az "anim" puffer felsõ felét fel lehet tölteni
					calc_event = 2;
 278:	82 e0       	ldi	r24, 0x02	; 2
 27a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <calc_event>
				}
				if (cycle_idx == CYCLE_NUM/2)
 27e:	e0 e0       	ldi	r30, 0x00	; 0
 280:	05 c0       	rjmp	.+10     	; 0x28c <__vector_3+0x19c>
 282:	e1 30       	cpi	r30, 0x01	; 1
 284:	19 f4       	brne	.+6      	; 0x28c <__vector_3+0x19c>
				{
					//jelezzük, hogy az "anim" puffer alsó felét fel lehet tölteni
					calc_event = 1;
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <calc_event>
				}
				
				wait_cnt = wait[cycle_idx]; //ennyit kell majd várni
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	e0 5a       	subi	r30, 0xA0	; 160
 290:	ff 4f       	sbci	r31, 0xFF	; 255
 292:	80 81       	ld	r24, Z
 294:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <wait_cnt>
			}
		}
	}
 298:	03 c0       	rjmp	.+6      	; 0x2a0 <__vector_3+0x1b0>
		if (cycles[buffer_offset + led_idx] < 15 && cycles[buffer_offset + led_idx] > 0)
		{
			on_off = 0;
		}

		led_idx++;
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <led_idx>
				
				wait_cnt = wait[cycle_idx]; //ennyit kell majd várni
			}
		}
	}
 2a0:	ff 91       	pop	r31
 2a2:	ef 91       	pop	r30
 2a4:	bf 91       	pop	r27
 2a6:	af 91       	pop	r26
 2a8:	9f 91       	pop	r25
 2aa:	8f 91       	pop	r24
 2ac:	7f 91       	pop	r23
 2ae:	6f 91       	pop	r22
 2b0:	5f 91       	pop	r21
 2b2:	4f 91       	pop	r20
 2b4:	3f 91       	pop	r19
 2b6:	2f 91       	pop	r18
 2b8:	0f 90       	pop	r0
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	0f 90       	pop	r0
 2be:	1f 90       	pop	r1
 2c0:	18 95       	reti

000002c2 <_exit>:
 2c2:	f8 94       	cli

000002c4 <__stop_program>:
 2c4:	ff cf       	rjmp	.-2      	; 0x2c4 <__stop_program>
